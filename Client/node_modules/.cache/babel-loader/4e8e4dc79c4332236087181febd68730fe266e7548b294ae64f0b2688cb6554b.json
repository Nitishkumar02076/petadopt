{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from 'react';\nimport { useAuthContext } from './UseAuthContext';\nexport const useLogin = () => {\n  _s();\n  const [loginError, setloginError] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const {\n    dispatch\n  } = useAuthContext();\n  const login = async (email, password) => {\n    setIsLoading(true);\n    setloginError(null);\n    try {\n      const response = await fetch('http://localhost:4000/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email,\n          password\n        })\n      });\n      const json = await response.json();\n      if (!response.ok) {\n        setIsLoading(false);\n        setloginError(json.error || 'Login failed. Please try again.');\n      } else {\n        localStorage.setItem('user', JSON.stringify(json));\n        dispatch({\n          type: 'LOGIN',\n          payload: json\n        });\n        setIsLoading(false);\n      }\n    } catch (loginError) {\n      setIsLoading(false);\n      setloginError('Network loginError. Please try again.');\n    }\n  };\n  return {\n    login,\n    isLoading,\n    loginError,\n    setloginError\n  };\n};\n_s(useLogin, \"yYvw/35DgnX5vbPvR8+mKHTU60Q=\", false, function () {\n  return [useAuthContext];\n});","map":{"version":3,"names":["useState","useAuthContext","useLogin","_s","loginError","setloginError","isLoading","setIsLoading","dispatch","login","email","password","response","fetch","method","headers","body","JSON","stringify","json","ok","error","localStorage","setItem","type","payload"],"sources":["D:/pet_adopt/Client/src/hooks/useLogin.js"],"sourcesContent":["import { useState } from 'react';\nimport { useAuthContext } from './UseAuthContext';\n\nexport const useLogin = () => {\n  const [loginError, setloginError] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const { dispatch } = useAuthContext();\n\n  const login = async (email, password) => {\n    setIsLoading(true);\n    setloginError(null);\n\n    try {\n      const response = await fetch('http://localhost:4000/login', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ email, password }),\n      });\n\n      const json = await response.json();\n\n      if (!response.ok) {\n        setIsLoading(false);\n        setloginError(json.error || 'Login failed. Please try again.');\n      } else {\n        localStorage.setItem('user', JSON.stringify(json));\n\n        dispatch({ type: 'LOGIN', payload: json });\n\n        setIsLoading(false);\n      }\n    } catch (loginError) {\n      setIsLoading(false);\n      setloginError('Network loginError. Please try again.');\n    }\n  };\n\n  return { login, isLoading, loginError, setloginError };\n};\n"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,SAASC,cAAc,QAAQ,kBAAkB;AAEjD,OAAO,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC5B,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGL,QAAQ,CAAC,IAAI,CAAC;EAClD,MAAM,CAACM,SAAS,EAAEC,YAAY,CAAC,GAAGP,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM;IAAEQ;EAAS,CAAC,GAAGP,cAAc,CAAC,CAAC;EAErC,MAAMQ,KAAK,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,KAAK;IACvCJ,YAAY,CAAC,IAAI,CAAC;IAClBF,aAAa,CAAC,IAAI,CAAC;IAEnB,IAAI;MACF,MAAMO,QAAQ,GAAG,MAAMC,KAAK,CAAC,6BAA6B,EAAE;QAC1DC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB,CAAC;QAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAER,KAAK;UAAEC;QAAS,CAAC;MAC1C,CAAC,CAAC;MAEF,MAAMQ,IAAI,GAAG,MAAMP,QAAQ,CAACO,IAAI,CAAC,CAAC;MAElC,IAAI,CAACP,QAAQ,CAACQ,EAAE,EAAE;QAChBb,YAAY,CAAC,KAAK,CAAC;QACnBF,aAAa,CAACc,IAAI,CAACE,KAAK,IAAI,iCAAiC,CAAC;MAChE,CAAC,MAAM;QACLC,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEN,IAAI,CAACC,SAAS,CAACC,IAAI,CAAC,CAAC;QAElDX,QAAQ,CAAC;UAAEgB,IAAI,EAAE,OAAO;UAAEC,OAAO,EAAEN;QAAK,CAAC,CAAC;QAE1CZ,YAAY,CAAC,KAAK,CAAC;MACrB;IACF,CAAC,CAAC,OAAOH,UAAU,EAAE;MACnBG,YAAY,CAAC,KAAK,CAAC;MACnBF,aAAa,CAAC,uCAAuC,CAAC;IACxD;EACF,CAAC;EAED,OAAO;IAAEI,KAAK;IAAEH,SAAS;IAAEF,UAAU;IAAEC;EAAc,CAAC;AACxD,CAAC;AAACF,EAAA,CAnCWD,QAAQ;EAAA,QAGED,cAAc;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}